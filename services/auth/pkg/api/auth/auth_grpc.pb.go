// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: auth.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationClient interface {
	BearerToken(ctx context.Context, in *BearerTokenRequest, opts ...grpc.CallOption) (*BearerTokenResponse, error)
	RevokeBearerToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	ResetPasswordToken(ctx context.Context, in *ResetPasswordTokenRequest, opts ...grpc.CallOption) (*TokenWithEmail, error)
	User(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserResponse, error)
	VerifyUser(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserResponse, error)
	VerifyUserToken(ctx context.Context, in *VerifyUserTokenRequest, opts ...grpc.CallOption) (*TokenWithEmail, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) BearerToken(ctx context.Context, in *BearerTokenRequest, opts ...grpc.CallOption) (*BearerTokenResponse, error) {
	out := new(BearerTokenResponse)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/BearerToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) RevokeBearerToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/RevokeBearerToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ResetPasswordToken(ctx context.Context, in *ResetPasswordTokenRequest, opts ...grpc.CallOption) (*TokenWithEmail, error) {
	out := new(TokenWithEmail)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/ResetPasswordToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) User(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) VerifyUser(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/VerifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) VerifyUserToken(ctx context.Context, in *VerifyUserTokenRequest, opts ...grpc.CallOption) (*TokenWithEmail, error) {
	out := new(TokenWithEmail)
	err := c.cc.Invoke(ctx, "/pkg.auth.Authentication/VerifyUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
// All implementations must embed UnimplementedAuthenticationServer
// for forward compatibility
type AuthenticationServer interface {
	BearerToken(context.Context, *BearerTokenRequest) (*BearerTokenResponse, error)
	RevokeBearerToken(context.Context, *Token) (*Empty, error)
	Register(context.Context, *RegisterRequest) (*UserResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*Empty, error)
	ResetPasswordToken(context.Context, *ResetPasswordTokenRequest) (*TokenWithEmail, error)
	User(context.Context, *Token) (*UserResponse, error)
	VerifyUser(context.Context, *Token) (*UserResponse, error)
	VerifyUserToken(context.Context, *VerifyUserTokenRequest) (*TokenWithEmail, error)
	mustEmbedUnimplementedAuthenticationServer()
}

// UnimplementedAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (UnimplementedAuthenticationServer) BearerToken(context.Context, *BearerTokenRequest) (*BearerTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BearerToken not implemented")
}
func (UnimplementedAuthenticationServer) RevokeBearerToken(context.Context, *Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBearerToken not implemented")
}
func (UnimplementedAuthenticationServer) Register(context.Context, *RegisterRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthenticationServer) ResetPassword(context.Context, *ResetPasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthenticationServer) ResetPasswordToken(context.Context, *ResetPasswordTokenRequest) (*TokenWithEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordToken not implemented")
}
func (UnimplementedAuthenticationServer) User(context.Context, *Token) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedAuthenticationServer) VerifyUser(context.Context, *Token) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUser not implemented")
}
func (UnimplementedAuthenticationServer) VerifyUserToken(context.Context, *VerifyUserTokenRequest) (*TokenWithEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserToken not implemented")
}
func (UnimplementedAuthenticationServer) mustEmbedUnimplementedAuthenticationServer() {}

// UnsafeAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServer will
// result in compilation errors.
type UnsafeAuthenticationServer interface {
	mustEmbedUnimplementedAuthenticationServer()
}

func RegisterAuthenticationServer(s grpc.ServiceRegistrar, srv AuthenticationServer) {
	s.RegisterService(&Authentication_ServiceDesc, srv)
}

func _Authentication_BearerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BearerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).BearerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/BearerToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).BearerToken(ctx, req.(*BearerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_RevokeBearerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RevokeBearerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/RevokeBearerToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RevokeBearerToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/ResetPasswordToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ResetPasswordToken(ctx, req.(*ResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).User(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_VerifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).VerifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/VerifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).VerifyUser(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_VerifyUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).VerifyUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.auth.Authentication/VerifyUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).VerifyUserToken(ctx, req.(*VerifyUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authentication_ServiceDesc is the grpc.ServiceDesc for Authentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.auth.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BearerToken",
			Handler:    _Authentication_BearerToken_Handler,
		},
		{
			MethodName: "RevokeBearerToken",
			Handler:    _Authentication_RevokeBearerToken_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Authentication_Register_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Authentication_ResetPassword_Handler,
		},
		{
			MethodName: "ResetPasswordToken",
			Handler:    _Authentication_ResetPasswordToken_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Authentication_User_Handler,
		},
		{
			MethodName: "VerifyUser",
			Handler:    _Authentication_VerifyUser_Handler,
		},
		{
			MethodName: "VerifyUserToken",
			Handler:    _Authentication_VerifyUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
