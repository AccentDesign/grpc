// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: email.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	SendEmail(ctx context.Context, opts ...grpc.CallOption) (EmailService_SendEmailClient, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendEmail(ctx context.Context, opts ...grpc.CallOption) (EmailService_SendEmailClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmailService_ServiceDesc.Streams[0], "/pkg.email.EmailService/SendEmail", opts...)
	if err != nil {
		return nil, err
	}
	x := &emailServiceSendEmailClient{stream}
	return x, nil
}

type EmailService_SendEmailClient interface {
	Send(*EmailRequest) error
	CloseAndRecv() (*EmailResponse, error)
	grpc.ClientStream
}

type emailServiceSendEmailClient struct {
	grpc.ClientStream
}

func (x *emailServiceSendEmailClient) Send(m *EmailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *emailServiceSendEmailClient) CloseAndRecv() (*EmailResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility
type EmailServiceServer interface {
	SendEmail(EmailService_SendEmailServer) error
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailServiceServer struct {
}

func (UnimplementedEmailServiceServer) SendEmail(EmailService_SendEmailServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_SendEmail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmailServiceServer).SendEmail(&emailServiceSendEmailServer{stream})
}

type EmailService_SendEmailServer interface {
	SendAndClose(*EmailResponse) error
	Recv() (*EmailRequest, error)
	grpc.ServerStream
}

type emailServiceSendEmailServer struct {
	grpc.ServerStream
}

func (x *emailServiceSendEmailServer) SendAndClose(m *EmailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *emailServiceSendEmailServer) Recv() (*EmailRequest, error) {
	m := new(EmailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEmail",
			Handler:       _EmailService_SendEmail_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "email.proto",
}
