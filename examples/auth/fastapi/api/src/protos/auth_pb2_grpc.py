# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import auth_pb2 as auth__pb2


class AuthenticationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BearerToken = channel.unary_unary(
                '/pkg.auth.Authentication/BearerToken',
                request_serializer=auth__pb2.BearerTokenRequest.SerializeToString,
                response_deserializer=auth__pb2.BearerTokenResponse.FromString,
                )
        self.RevokeBearerToken = channel.unary_unary(
                '/pkg.auth.Authentication/RevokeBearerToken',
                request_serializer=auth__pb2.Token.SerializeToString,
                response_deserializer=auth__pb2.Empty.FromString,
                )
        self.Register = channel.unary_unary(
                '/pkg.auth.Authentication/Register',
                request_serializer=auth__pb2.RegisterRequest.SerializeToString,
                response_deserializer=auth__pb2.UserResponse.FromString,
                )
        self.ResetPassword = channel.unary_unary(
                '/pkg.auth.Authentication/ResetPassword',
                request_serializer=auth__pb2.ResetPasswordRequest.SerializeToString,
                response_deserializer=auth__pb2.Empty.FromString,
                )
        self.ResetPasswordToken = channel.unary_unary(
                '/pkg.auth.Authentication/ResetPasswordToken',
                request_serializer=auth__pb2.ResetPasswordTokenRequest.SerializeToString,
                response_deserializer=auth__pb2.TokenWithEmail.FromString,
                )
        self.User = channel.unary_unary(
                '/pkg.auth.Authentication/User',
                request_serializer=auth__pb2.Token.SerializeToString,
                response_deserializer=auth__pb2.UserResponse.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/pkg.auth.Authentication/UpdateUser',
                request_serializer=auth__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=auth__pb2.UserResponse.FromString,
                )
        self.VerifyUser = channel.unary_unary(
                '/pkg.auth.Authentication/VerifyUser',
                request_serializer=auth__pb2.Token.SerializeToString,
                response_deserializer=auth__pb2.UserResponse.FromString,
                )
        self.VerifyUserToken = channel.unary_unary(
                '/pkg.auth.Authentication/VerifyUserToken',
                request_serializer=auth__pb2.VerifyUserTokenRequest.SerializeToString,
                response_deserializer=auth__pb2.TokenWithEmail.FromString,
                )


class AuthenticationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BearerToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeBearerToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPasswordToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def User(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyUserToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthenticationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BearerToken': grpc.unary_unary_rpc_method_handler(
                    servicer.BearerToken,
                    request_deserializer=auth__pb2.BearerTokenRequest.FromString,
                    response_serializer=auth__pb2.BearerTokenResponse.SerializeToString,
            ),
            'RevokeBearerToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeBearerToken,
                    request_deserializer=auth__pb2.Token.FromString,
                    response_serializer=auth__pb2.Empty.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=auth__pb2.RegisterRequest.FromString,
                    response_serializer=auth__pb2.UserResponse.SerializeToString,
            ),
            'ResetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPassword,
                    request_deserializer=auth__pb2.ResetPasswordRequest.FromString,
                    response_serializer=auth__pb2.Empty.SerializeToString,
            ),
            'ResetPasswordToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPasswordToken,
                    request_deserializer=auth__pb2.ResetPasswordTokenRequest.FromString,
                    response_serializer=auth__pb2.TokenWithEmail.SerializeToString,
            ),
            'User': grpc.unary_unary_rpc_method_handler(
                    servicer.User,
                    request_deserializer=auth__pb2.Token.FromString,
                    response_serializer=auth__pb2.UserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=auth__pb2.UpdateUserRequest.FromString,
                    response_serializer=auth__pb2.UserResponse.SerializeToString,
            ),
            'VerifyUser': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyUser,
                    request_deserializer=auth__pb2.Token.FromString,
                    response_serializer=auth__pb2.UserResponse.SerializeToString,
            ),
            'VerifyUserToken': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyUserToken,
                    request_deserializer=auth__pb2.VerifyUserTokenRequest.FromString,
                    response_serializer=auth__pb2.TokenWithEmail.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pkg.auth.Authentication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Authentication(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BearerToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/BearerToken',
            auth__pb2.BearerTokenRequest.SerializeToString,
            auth__pb2.BearerTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevokeBearerToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/RevokeBearerToken',
            auth__pb2.Token.SerializeToString,
            auth__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/Register',
            auth__pb2.RegisterRequest.SerializeToString,
            auth__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/ResetPassword',
            auth__pb2.ResetPasswordRequest.SerializeToString,
            auth__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetPasswordToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/ResetPasswordToken',
            auth__pb2.ResetPasswordTokenRequest.SerializeToString,
            auth__pb2.TokenWithEmail.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def User(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/User',
            auth__pb2.Token.SerializeToString,
            auth__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/UpdateUser',
            auth__pb2.UpdateUserRequest.SerializeToString,
            auth__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/VerifyUser',
            auth__pb2.Token.SerializeToString,
            auth__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyUserToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pkg.auth.Authentication/VerifyUserToken',
            auth__pb2.VerifyUserTokenRequest.SerializeToString,
            auth__pb2.TokenWithEmail.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
